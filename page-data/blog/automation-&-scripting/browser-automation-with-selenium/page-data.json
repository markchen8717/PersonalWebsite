{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/automation-&-scripting/browser-automation-with-selenium","result":{"data":{"contentfulBlogPost":{"postContent":{"json":{"nodeType":"document","data":{},"content":[{"nodeType":"paragraph","content":[{"nodeType":"text","value":"In this day and age, almost everyone uses the Internet, and there’s no doubt that every Internet user interacts with the browser. Let’s suppose that you use the browser everyday to look at the weather and perhaps for a daily inspiration quote to start your day off. Needless to say, tasks like these could be automated to save you time. However, the task itself isn't our main focus, but rather the demonstration of the capabilities of Selenium where we can apply onto other tasks that scale up.","marks":[],"data":{}}],"data":{}},{"nodeType":"heading-1","content":[{"nodeType":"text","value":"","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"I have a nightly web routine that I run before I go to sleep. I leave my computer on my bedside table, with a couple of YouTube videos playing to help me fall asleep. You are right, if you guessed that I've automated this task. And If you didn't because you thought it wasn't a good candidate, that's understandable. The caveat is that I need each specific video to have a specific volume, otherwise, it will drive me crazy and I will be sleepless.","marks":[],"data":{}}],"data":{}},{"nodeType":"heading-1","content":[{"nodeType":"text","value":"","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"I wrote my program in Python3 and used the Firefox browser, but Selenium is a framework available in multiple programming languages and supports a variety of popular web browsers. Without further a do, let's jump into the code. ","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"","marks":[],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"<code python>","marks":[],"data":{}}],"data":{"uri":" "}},{"nodeType":"text","value":"","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"import sys  # nopep8\nsys.path.insert(0, '../')  # nopep8\nfrom selenium.webdriver.common.by import By\nfrom selenium import webdriver\nfrom PySeleniumHelper import try_until_success, wait_to_click, wait_to_get_element","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"","marks":[{"type":"code"}],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"</code>","marks":[],"data":{}}],"data":{"uri":" "}},{"nodeType":"text","value":"","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"These are the python modules we need to import and use for the project. All these modules are python built-in, with the exception of selenium, which can be downloaded via pip, and PySeleniumHelper, which is available on my ","marks":[],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"GitHub","marks":[],"data":{}}],"data":{"uri":"https://github.com/markchen8717/PySeleniumHelper"}},{"nodeType":"text","value":". PySeleniumHelper is a set of helper functions I wrote for common selenium tasks to speed up development.","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"","marks":[],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"<code python>","marks":[],"data":{}}],"data":{"uri":" "}},{"nodeType":"text","value":"","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"AIRPLANE_URL = \"https://www.youtube.com/watch?v=wzjWIxXBs_s\"\nMUSIC_URL = \"https://www.youtube.com/watch?v=U89-ljlq-DE\"\nSTORY_URL = \"https://www.youtube.com/watch?v=kEkPxzKgUlk\"","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"","marks":[],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"</code>","marks":[],"data":{}}],"data":{"uri":" "}},{"nodeType":"text","value":"","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"These are the variables which hold links to the YouTube videos.","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"","marks":[],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"<code python>","marks":[],"data":{}}],"data":{"uri":" "}},{"nodeType":"text","value":"","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"def set_youtube_player_volume(driver, volume):\n    driver.execute_script(\"\"\"\n        youtubePlayer = document.getElementById(\"movie_player\");\n        youtubePlayer.setVolume(%d);\n    \"\"\" % (volume))","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"","marks":[],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"</code>","marks":[],"data":{}}],"data":{"uri":" "}},{"nodeType":"text","value":"","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"This is the function to set a specific volume for the YouTube video opened. The ","marks":[],"data":{}},{"nodeType":"text","value":"driver","marks":[{"type":"code"}],"data":{}},{"nodeType":"text","value":" parameter is the Selenium webdriver that is controlling the browser. YouTube has a Javascript API which allows users to control the media player through the browser developer console. We can tell Selenium to execute Javascript through it just as if we were doing this manually inside the browser developer console. ","marks":[],"data":{}}],"data":{}},{"nodeType":"heading-1","content":[{"nodeType":"text","value":"","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"After that, we have the main function, where the majority of the program comes together, so I will break it down further for clarity.","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"","marks":[],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"<code python>","marks":[],"data":{}}],"data":{"uri":" "}},{"nodeType":"text","value":"","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"def main(url, volume, loop):\n    profile = webdriver.FirefoxProfile('cq2fcevc.Selenium')\n    driver = webdriver.Firefox(\n        firefox_profile=profile, executable_path='./geckodriver')","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"","marks":[{"type":"code"}],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"</code>","marks":[],"data":{}}],"data":{"uri":" "}},{"nodeType":"text","value":"","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"Each time the main function is executed, a new instance of the browser will be created. Firstly, we will create a Selenium webdriver for Firefox, with our own browser profile. Selenium allows us to use our own browser profiles to automate tasks in a personalized setting. Without this, we won't have access to the extensions we've installed, like AdBlocker ;). ","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"","marks":[],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"<code python>","marks":[],"data":{}}],"data":{"uri":" "}},{"nodeType":"text","value":"","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"    driver.get(url)\n    #locators for each element\n    play_button = (By.CSS_SELECTOR,\n                   \"button[class^='ytp-play-button ytp-button']\")\n    autoplay_button = (\n        By.CSS_SELECTOR, \"paper-toggle-button[aria-label^='Autoplay']\")\n    loop_button = (By.CLASS_NAME, \"ytp-menuitem-label\")","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"    wait_to_click(driver, play_button, 10)","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"    #If auto-play is on, toggle it off\n    if (wait_to_get_element(driver, autoplay_button, 10).get_attribute(\"checked\")):\n        wait_to_click(driver, autoplay_button, 10)","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"","marks":[],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"</code>","marks":[],"data":{}}],"data":{"uri":" "}},{"nodeType":"text","value":"","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"After navigating to the specified ","marks":[],"data":{}},{"nodeType":"text","value":"url","marks":[{"type":"code"}],"data":{}},{"nodeType":"text","value":", assuming it is a link to a YouTube video, we will have Selenium to click the play button and toggle off auto-play. Selenium provides a variety of mechanisms to find specific elements on a web page. We can find elements by class name, ID, XPath and more. In this case, CSS selectors are used to locate each element. ","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"","marks":[],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"<code python>","marks":[],"data":{}}],"data":{"uri":" "}},{"nodeType":"text","value":"","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"    if loop:\n        play_button_element = wait_to_get_element(driver, play_button, 10)\n        actions = ActionChains(driver)\n        actions.move_to_element(play_button_element)\n        actions.context_click(play_button_element)\n        actions.perform()\n        wait_to_click(driver, loop_button, 10)","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"    set_youtube_player_volume(driver, volume)","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"","marks":[],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"</code>","marks":[],"data":{}}],"data":{"uri":" "}},{"nodeType":"text","value":"","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"The ","marks":[],"data":{}},{"nodeType":"text","value":"loop","marks":[{"type":"code"}],"data":{}},{"nodeType":"text","value":" parameter is a boolean to signal whether or not we wish to loop a certain video. Looping a video isn't supported inside the YouTube Javascript API, so we must have Selenium do it. The loop button is hidden, one would need to hover their mouse over the play button and right click it to reveal the loop button. These low-level interactions such as mouse movements, mouse button actions, and context menu interactions are doable with Selenium's ActionChains class.","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"","marks":[],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"<code python>","marks":[],"data":{}}],"data":{"uri":" "}},{"nodeType":"text","value":"","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"main(AIRPLANE_URL, 100, False)\nmain(MUSIC_PLAYLIST_URL, 20, True)\nmain(STORY_URL, 20, False)","marks":[{"type":"code"}],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"","marks":[],"data":{}},{"nodeType":"hyperlink","content":[{"nodeType":"text","value":"</code>","marks":[],"data":{}}],"data":{"uri":" "}},{"nodeType":"text","value":"","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"Finally, we call our main function with the predefined link variables and we are done! We can easily modify the program to play different videos with different volumes by simply tweaking the variables. ","marks":[],"data":{}}],"data":{}},{"nodeType":"heading-1","content":[{"nodeType":"text","value":"","marks":[],"data":{}}],"data":{}},{"nodeType":"paragraph","content":[{"nodeType":"text","value":"This is just the tip of the iceberg for what Selenium is capable of. I dare say that 99% of your daily browser tasks could be easily automated. So what are you waiting for? Get them automated for you now!","marks":[],"data":{}}],"data":{}}]}}}},"pageContext":{"postTitle":"Browser Automation with Selenium","postDescription":"Employing Selenium to perform your mundane browser tasks for under minimum wage."}}}